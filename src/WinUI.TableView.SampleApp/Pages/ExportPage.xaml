<Page x:Class="WinUI.TableView.SampleApp.Pages.ExportPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:local="using:WinUI.TableView.SampleApp"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:tv="using:WinUI.TableView"
      xmlns:controls="using:WinUI.TableView.SampleApp.Controls"
      xmlns:toolkit="using:CommunityToolkit.WinUI.Controls"
      xmlns:ui="using:CommunityToolkit.WinUI"
      xmlns:converters="using:WinUI.TableView.SampleApp.Converters"
      d:DataContext="{d:DesignInstance Type=local:ExampleViewModel}"
      mc:Ignorable="d">

    <Grid>
        <controls:SamplePresenter Header="Export Data"
                                  Description="Showcasing built in export option and custom export implementation.">
            <controls:SamplePresenter.Example>
                <tv:TableView x:Name="tableView"
                              SelectionMode="Extended"
                              CornerButtonMode="Options"
                              ShowExportOptions="True"
                              ItemsSource="{Binding Items}"
                              ExportAllContent="OnExportAllContent"
                              ExportSelectedContent="OnExportSelectedContent"
                              AutoGeneratingColumn="{x:Bind local:ExampleModelColumnsHelper.OnAutoGeneratingColumns}" />
            </controls:SamplePresenter.Example>
            <controls:SamplePresenter.Options>
                <StackPanel Spacing="16">
                    <ToggleSwitch Header="Show Export Options"
                                  OnContent="True"
                                  OffContent="False"
                                  IsOn="{Binding ShowExportOptions, Mode=TwoWay, ElementName=tableView}" />
                    <ToggleSwitch x:Name="exportToExcel"
                                  Header="Export Excel File"
                                  OnContent="True"
                                  OffContent="False" />
                </StackPanel>
            </controls:SamplePresenter.Options>
            <controls:SamplePresenter.Xaml>
                <x:String xml:space="preserve">
&lt;tv:TableView x:Name="tableView"
    SelectionMode="Extended"
    CornerButtonMode="Options"
    ShowExportOptions="$(ShowExportOptions)"
    ItemsSource="{Binding Items}"
    ExportAllContent="OnExportAllContent"
    ExportSelectedContent="OnExportSelectedContent" />
                </x:String>
            </controls:SamplePresenter.Xaml>
            <controls:SamplePresenter.CSharp>
                <x:String xml:space="preserve">
    private async void OnExportAllContent(object sender, TableViewExportContentEventArgs e)
    {
        if (exportToExcel.IsOn is true)
        {
            e.Handled = true;

            await ExportToExcel(true);
        }
    }

    private async void OnExportSelectedContent(object sender, TableViewExportContentEventArgs e)
    {
        if (exportToExcel.IsOn is true)
        {
            e.Handled = true;

            await ExportToExcel(false);
        }
    }

    private async Task ExportToExcel(bool all)
    {
        var separator = '|';
        var content = all ? tableView.GetAllContent(true, separator) : tableView.GetSelectedContent(true, separator);
        var lines = content.Split('\n');
        using var workbook = new XLWorkbook();
        var worksheet = workbook.Worksheets.Add("WinUI.TableView");

        for (var rowIndex = 0; rowIndex &lt;lines.Length; rowIndex++)
        {
            var cells = lines[rowIndex].Split(separator);

            for (var colIndex = 0; colIndex &lt; cells.Length; colIndex++)
            {
                worksheet.Cell(rowIndex + 1, colIndex + 1).Value = cells[colIndex];
            }
        }

        var savePicker = new FileSavePicker();
        savePicker.FileTypeChoices.Add("Excel Workbook", [".xlsx"]);
                    
#if WINDOWS
        var hWnd = Win32Interop.GetWindowFromWindowId(XamlRoot.ContentIslandEnvironment.AppWindowId);
        InitializeWithWindow.Initialize(savePicker, hWnd);
#endif

        var file = await savePicker.PickSaveFileAsync();
        using var stream = await file.OpenStreamForWriteAsync();
        stream.SetLength(0);
        workbook.SaveAs(stream);
    }
                </x:String>
            </controls:SamplePresenter.CSharp>
            <controls:SamplePresenter.Substitutions>
                <controls:CodeSubstitution Key="ShowExportOptions"
                                           Value="{x:Bind tableView.ShowExportOptions, Mode=OneWay}" />
            </controls:SamplePresenter.Substitutions>
        </controls:SamplePresenter>
    </Grid>
</Page>
